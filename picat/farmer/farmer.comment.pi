% farmer.pi in Picat
% Farmer's problem

% start snippet import
import planner.
% end snippet import

% start snippet main
main =>
    S0 = [s,s,s,s],
    plan(S0,Plan),
    println(Plan).
% end snippet main

% start snippet final
final([n,n,n,n]) => true.
% end snippet final

% start snippet action-farmer_wolf
action([F,F,G,C],S1,Action,ActionCost) ?=>
    Action = farmer_wolf,
    ActionCost = 1,        
    opposite(F,F1),
    S1 = [F1,F1,G,C],
    not unsafe(S1).
% end snippet action-farmer_wolf

% start snippet action-farmer_goat
action([F,W,F,C],S1,Action,ActionCost) ?=>
    Action = farmer_goat,
    ActionCost = 1,        
    opposite(F,F1),
    S1 = [F1,W,F1,C],
    not unsafe(S1).
% end snippet action-farmer_goat

% start snippet action-farmer_cabbage
action([F,W,G,F],S1,Action,ActionCost) ?=>
    Action = farmer_cabbage,
    ActionCost = 1,        
    opposite(F,F1),
    S1 = [F1,W,G,F1],
    not unsafe(S1).
% end snippet action-farmer_cabbage

% start snippet action-farmer_alone
action([F,W,G,C],S1,Action,ActionCost) =>
    Action = farmer_alone,
    ActionCost = 1,        
    opposite(F,F1),
    S1 = [F1,W,G,C],
    not unsafe(S1).
% end snippet action-farmer_alone

% start snippet opposite
index (+,-) (-,+)
opposite(n,s).
opposite(s,n).
% end snippet opposite

% start snippet unsafe
unsafe([F,W,G,_C]),W == G,F !== W => true.
unsafe([F,_W,G,C]),G == C,F !== G => true.
% end snippet unsafe